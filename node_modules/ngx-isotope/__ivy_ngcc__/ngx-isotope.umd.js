(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['@angular/core','@angular/common','exports', '@angular/core', '@angular/common'], factory) :
	(factory(global.ng.core,global.ng.common,(global['ngx-isotope'] = {}),global._angular_core,global._angular_common));
}(this, (function (ɵngcc0,ɵngcc1,exports,_angular_core,_angular_common) { 
var _c0 = ["*"];
'use strict';

var IsotopeGridComponent = (function () {
    /**
     * @param {?} el
     */
    function IsotopeGridComponent(el) {
        this.el = el;
        this.items = [];
    }
    /**
     * @return {?}
     */
    IsotopeGridComponent.prototype.ngOnInit = function () {
        if (!this.options)
            this.options = {};
        if (!this.options.itemSelector) {
            this.options.itemSelector = '[isotope-item], isotope-item';
        }
        if (this.el.nativeElement.tagName === 'ISOTOPE-GRID') {
            this.el.nativeElement.style.display = 'block';
        }
        this.isotope = new Isotope(this.el.nativeElement, this.options);
    };
    /**
     * @param {?} el
     * @return {?}
     */
    IsotopeGridComponent.prototype.add = function (el) {
        var _this = this;
        this.isotope.appended(el);
        this.isotope.layout();
        imagesLoaded(el).on('progress', function () {
            _this.isotope.layout();
        });
    };
IsotopeGridComponent.ɵfac = function IsotopeGridComponent_Factory(t) { return new (t || IsotopeGridComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IsotopeGridComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IsotopeGridComponent, selectors: [["isotope-grid"]], inputs: { options: "options" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function IsotopeGridComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsotopeGridComponent, [{
        type: _angular_core.Component,
        args: [{
                selector: 'isotope-grid',
                template: "<ng-content></ng-content> ",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { options: [{
            type: _angular_core.Input
        }] }); })();
    return IsotopeGridComponent;
}());
/**
 * @nocollapse
 */
IsotopeGridComponent.ctorParameters = function () { return [
    { type: _angular_core.ElementRef, },
]; };
IsotopeGridComponent.propDecorators = {
    'options': [{ type: _angular_core.Input },],
};

var IsotopeItemComponent = (function () {
    /**
     * @param {?} grid
     * @param {?} el
     */
    function IsotopeItemComponent(grid, el) {
        this.grid = grid;
        this.el = el;
    }
    /**
     * @return {?}
     */
    IsotopeItemComponent.prototype.ngOnInit = function () {
    };
    /**
     * @return {?}
     */
    IsotopeItemComponent.prototype.ngAfterViewInit = function () {
        this.grid.add(this.el.nativeElement);
    };
IsotopeItemComponent.ɵfac = function IsotopeItemComponent_Factory(t) { return new (t || IsotopeItemComponent)(ɵngcc0.ɵɵdirectiveInject(IsotopeGridComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IsotopeItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IsotopeItemComponent, selectors: [["isotope-item"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function IsotopeItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsotopeItemComponent, [{
        type: _angular_core.Component,
        args: [{
                selector: 'isotope-item',
                template: "<ng-content></ng-content> ",
                styles: [""]
            }]
    }], function () { return [{ type: IsotopeGridComponent }, { type: ɵngcc0.ElementRef }]; }, null); })();
    return IsotopeItemComponent;
}());
/**
 * @nocollapse
 */
IsotopeItemComponent.ctorParameters = function () { return [
    { type: IsotopeGridComponent, },
    { type: _angular_core.ElementRef, },
]; };

var IsotopeModule = (function () {
    function IsotopeModule() {
    }
    /**
     * @return {?}
     */
    IsotopeModule.forRoot = function () {
        return {
            ngModule: IsotopeModule,
            providers: []
        };
    };
IsotopeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IsotopeModule });
IsotopeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IsotopeModule_Factory(t) { return new (t || IsotopeModule)(); }, imports: [[
            _angular_common.CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IsotopeModule, { declarations: [IsotopeGridComponent, IsotopeItemComponent], imports: [ɵngcc1.CommonModule], exports: [IsotopeGridComponent, IsotopeItemComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsotopeModule, [{
        type: _angular_core.NgModule,
        args: [{
                imports: [
                    _angular_common.CommonModule
                ],
                declarations: [
                    IsotopeGridComponent,
                    IsotopeItemComponent,
                ],
                exports: [
                    IsotopeGridComponent,
                    IsotopeItemComponent,
                ]
            }]
    }], function () { return []; }, null); })();
    return IsotopeModule;
}());
/**
 * @nocollapse
 */
IsotopeModule.ctorParameters = function () { return []; };

exports.IsotopeModule = IsotopeModule;
exports.IsotopeGridComponent = IsotopeGridComponent;
exports.IsotopeItemComponent = IsotopeItemComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWlzb3RvcGUudW1kLmpzIiwic291cmNlcyI6WyJuZ3gtaXNvdG9wZS51bWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSw0SEFBd0U7QUFDeEUsd0ZBQXNEO0FBQ3RELDBDQUFVO0FBQ1YsaUNBQW1COztBQUF5QztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFDTjtBQUNBLEtBT0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7MkdBQU07QUFDTjtBQUNBLEtBT0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0RBQU07QUFDTjtBQUNBLEtBZUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKSwgcmVxdWlyZSgnQGFuZ3VsYXIvY29tbW9uJykpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cycsICdAYW5ndWxhci9jb3JlJywgJ0Bhbmd1bGFyL2NvbW1vbiddLCBmYWN0b3J5KSA6XG5cdChmYWN0b3J5KChnbG9iYWxbJ25neC1pc290b3BlJ10gPSB7fSksZ2xvYmFsLl9hbmd1bGFyX2NvcmUsZ2xvYmFsLl9hbmd1bGFyX2NvbW1vbikpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMsX2FuZ3VsYXJfY29yZSxfYW5ndWxhcl9jb21tb24pIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgSXNvdG9wZUdyaWRDb21wb25lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gez99IGVsXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIElzb3RvcGVHcmlkQ29tcG9uZW50KGVsKSB7XHJcbiAgICAgICAgdGhpcy5lbCA9IGVsO1xyXG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7P31cclxuICAgICAqL1xyXG4gICAgSXNvdG9wZUdyaWRDb21wb25lbnQucHJvdG90eXBlLm5nT25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zKVxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB7fTtcclxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5pdGVtU2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLml0ZW1TZWxlY3RvciA9ICdbaXNvdG9wZS1pdGVtXSwgaXNvdG9wZS1pdGVtJztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZWwubmF0aXZlRWxlbWVudC50YWdOYW1lID09PSAnSVNPVE9QRS1HUklEJykge1xyXG4gICAgICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXNvdG9wZSA9IG5ldyBJc290b3BlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcy5vcHRpb25zKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7P30gZWxcclxuICAgICAqIEByZXR1cm4gez99XHJcbiAgICAgKi9cclxuICAgIElzb3RvcGVHcmlkQ29tcG9uZW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuaXNvdG9wZS5hcHBlbmRlZChlbCk7XHJcbiAgICAgICAgdGhpcy5pc290b3BlLmxheW91dCgpO1xyXG4gICAgICAgIGltYWdlc0xvYWRlZChlbCkub24oJ3Byb2dyZXNzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5pc290b3BlLmxheW91dCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBJc290b3BlR3JpZENvbXBvbmVudDtcclxufSgpKTtcclxuSXNvdG9wZUdyaWRDb21wb25lbnQuZGVjb3JhdG9ycyA9IFtcclxuICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5Db21wb25lbnQsIGFyZ3M6IFt7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2lzb3RvcGUtZ3JpZCcsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+IFwiLFxyXG4gICAgICAgICAgICAgICAgc3R5bGVzOiBbXCJcIl1cclxuICAgICAgICAgICAgfSxdIH0sXHJcbl07XHJcbi8qKlxyXG4gKiBAbm9jb2xsYXBzZVxyXG4gKi9cclxuSXNvdG9wZUdyaWRDb21wb25lbnQuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXHJcbiAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuRWxlbWVudFJlZiwgfSxcclxuXTsgfTtcclxuSXNvdG9wZUdyaWRDb21wb25lbnQucHJvcERlY29yYXRvcnMgPSB7XHJcbiAgICAnb3B0aW9ucyc6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5wdXQgfSxdLFxyXG59O1xuXG52YXIgSXNvdG9wZUl0ZW1Db21wb25lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gez99IGdyaWRcclxuICAgICAqIEBwYXJhbSB7P30gZWxcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gSXNvdG9wZUl0ZW1Db21wb25lbnQoZ3JpZCwgZWwpIHtcclxuICAgICAgICB0aGlzLmdyaWQgPSBncmlkO1xyXG4gICAgICAgIHRoaXMuZWwgPSBlbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7P31cclxuICAgICAqL1xyXG4gICAgSXNvdG9wZUl0ZW1Db21wb25lbnQucHJvdG90eXBlLm5nT25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7P31cclxuICAgICAqL1xyXG4gICAgSXNvdG9wZUl0ZW1Db21wb25lbnQucHJvdG90eXBlLm5nQWZ0ZXJWaWV3SW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmdyaWQuYWRkKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIElzb3RvcGVJdGVtQ29tcG9uZW50O1xyXG59KCkpO1xyXG5Jc290b3BlSXRlbUNvbXBvbmVudC5kZWNvcmF0b3JzID0gW1xyXG4gICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkNvbXBvbmVudCwgYXJnczogW3tcclxuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnaXNvdG9wZS1pdGVtJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxuZy1jb250ZW50PjwvbmctY29udGVudD4gXCIsXHJcbiAgICAgICAgICAgICAgICBzdHlsZXM6IFtcIlwiXVxyXG4gICAgICAgICAgICB9LF0gfSxcclxuXTtcclxuLyoqXHJcbiAqIEBub2NvbGxhcHNlXHJcbiAqL1xyXG5Jc290b3BlSXRlbUNvbXBvbmVudC5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcclxuICAgIHsgdHlwZTogSXNvdG9wZUdyaWRDb21wb25lbnQsIH0sXHJcbiAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuRWxlbWVudFJlZiwgfSxcclxuXTsgfTtcblxudmFyIElzb3RvcGVNb2R1bGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSXNvdG9wZU1vZHVsZSgpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7P31cclxuICAgICAqL1xyXG4gICAgSXNvdG9wZU1vZHVsZS5mb3JSb290ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5nTW9kdWxlOiBJc290b3BlTW9kdWxlLFxyXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtdXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSXNvdG9wZU1vZHVsZTtcclxufSgpKTtcclxuSXNvdG9wZU1vZHVsZS5kZWNvcmF0b3JzID0gW1xyXG4gICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk5nTW9kdWxlLCBhcmdzOiBbe1xyXG4gICAgICAgICAgICAgICAgaW1wb3J0czogW1xyXG4gICAgICAgICAgICAgICAgICAgIF9hbmd1bGFyX2NvbW1vbi5Db21tb25Nb2R1bGVcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICBJc290b3BlR3JpZENvbXBvbmVudCxcclxuICAgICAgICAgICAgICAgICAgICBJc290b3BlSXRlbUNvbXBvbmVudCxcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgSXNvdG9wZUdyaWRDb21wb25lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgSXNvdG9wZUl0ZW1Db21wb25lbnQsXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0sXSB9LFxyXG5dO1xyXG4vKipcclxuICogQG5vY29sbGFwc2VcclxuICovXHJcbklzb3RvcGVNb2R1bGUuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfTtcblxuZXhwb3J0cy5Jc290b3BlTW9kdWxlID0gSXNvdG9wZU1vZHVsZTtcbmV4cG9ydHMuSXNvdG9wZUdyaWRDb21wb25lbnQgPSBJc290b3BlR3JpZENvbXBvbmVudDtcbmV4cG9ydHMuSXNvdG9wZUl0ZW1Db21wb25lbnQgPSBJc290b3BlSXRlbUNvbXBvbmVudDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbiJdfQ==