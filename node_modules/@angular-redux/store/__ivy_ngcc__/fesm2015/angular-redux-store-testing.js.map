{"version":3,"file":"angular-redux-store-testing.js","sources":["ng:/@angular-redux/store/testing/dev-tools.mock.ts","ng:/@angular-redux/store/testing/observable-store.mock.ts","ng:/@angular-redux/store/testing/ng-redux.mock.ts","ng:/@angular-redux/store/testing/ng-redux-testing.module.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO: See if this linting rule can be enabled with new build process (ng-packagr)\n// tslint:disable:no-implicit-dependencies\nimport { DevToolsExtension } from '@angular-redux/store';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class MockDevToolsExtension extends DevToolsExtension {}\n","// TODO: See if this linting rule can be enabled with new build process (ng-packagr)\n// tslint:disable:no-implicit-dependencies\nimport { Comparator, PathSelector, Selector } from '@angular-redux/store';\nimport { AnyAction, Dispatch, Reducer } from 'redux';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\n/** @hidden */\nexport interface SelectorStubRecord {\n  subject: Subject<any>;\n  comparator: Comparator;\n}\n\n/** @hidden */\nexport interface SelectorStubMap {\n  [selector: string]: SelectorStubRecord;\n}\n\n/** @hidden */\nexport interface SubStoreStubMap {\n  [basePath: string]: MockObservableStore<any>;\n}\n\n/** @hidden */\nexport class MockObservableStore<State> {\n  selections: SelectorStubMap = {};\n  subStores: SubStoreStubMap = {};\n\n  getSelectorStub = <SelectedState>(\n    selector?: Selector<State, SelectedState>,\n    comparator?: Comparator,\n  ): Subject<SelectedState> =>\n    this.initSelectorStub<SelectedState>(selector, comparator).subject;\n\n  reset = () => {\n    Object.keys(this.subStores).forEach(k => this.subStores[k].reset());\n    this.selections = {};\n    this.subStores = {};\n  };\n\n  dispatch: Dispatch<AnyAction> = action => action;\n  replaceReducer = () => null;\n  getState = () => ({});\n  subscribe = () => () => null;\n\n  select = <SelectedState>(\n    selector?: Selector<any, SelectedState>,\n    comparator?: Comparator,\n  ): Observable<any> => {\n    const stub = this.initSelectorStub<SelectedState>(selector, comparator);\n    return stub.comparator\n      ? stub.subject.pipe(distinctUntilChanged(stub.comparator))\n      : stub.subject;\n  };\n\n  configureSubStore = <SubState>(\n    basePath: PathSelector,\n    _: Reducer<SubState, AnyAction>,\n  ): MockObservableStore<SubState> => this.initSubStore<SubState>(basePath);\n\n  getSubStore = <SubState>(\n    ...pathSelectors: PathSelector[]\n  ): MockObservableStore<any> => {\n    const [first, ...rest] = pathSelectors;\n    return (first\n      ? this.initSubStore(first).getSubStore(...rest)\n      : this) as MockObservableStore<SubState>;\n  };\n\n  private initSubStore<SubState>(basePath: PathSelector) {\n    const result =\n      this.subStores[JSON.stringify(basePath)] ||\n      new MockObservableStore<SubState>();\n    this.subStores[JSON.stringify(basePath)] = result;\n    return result;\n  }\n\n  private initSelectorStub<SelectedState>(\n    selector?: Selector<State, SelectedState>,\n    comparator?: Comparator,\n  ): SelectorStubRecord {\n    const key = selector ? selector.toString() : '';\n    const record = this.selections[key] || {\n      subject: new ReplaySubject<SelectedState>(),\n      comparator,\n    };\n\n    this.selections[key] = record;\n    return record;\n  }\n}\n","// TODO: See if this linting rule can be enabled with new build process (ng-packagr)\n// tslint:disable:no-implicit-dependencies\n// tslint:disable:member-ordering\nimport {\n  Comparator,\n  NgRedux,\n  PathSelector,\n  Selector,\n} from '@angular-redux/store';\nimport {\n  AnyAction,\n  Dispatch,\n  Middleware,\n  Reducer,\n  Store,\n  StoreEnhancer,\n} from 'redux';\nimport { Observable, Subject } from 'rxjs';\nimport { MockObservableStore } from './observable-store.mock';\n/**\n * Convenience mock to make it easier to control selector\n * behaviour in unit tests.\n */\nexport class MockNgRedux<T = {}> extends NgRedux<T> {\n  /** @deprecated Use MockNgRedux.getInstance() instead. */\n  static mockInstance?: MockNgRedux<any> = undefined;\n\n  /**\n   * Returns a subject that's connected to any observable returned by the\n   * given selector. You can use this subject to pump values into your\n   * components or services under test; when they call .select or @select\n   * in the context of a unit test, MockNgRedux will give them the values\n   * you pushed onto your stub.\n   */\n  static getSelectorStub<R, S>(\n    selector?: Selector<R, S>,\n    comparator?: Comparator,\n  ): Subject<S> {\n    return MockNgRedux.getInstance().mockRootStore.getSelectorStub<S>(\n      selector,\n      comparator,\n    );\n  }\n\n  /**\n   * Returns a mock substore that allows you to set up selectorStubs for\n   * any 'fractal' stores your app creates with NgRedux.configureSubStore.\n   *\n   * If your app creates deeply nested substores from other substores,\n   * pass the chain of pathSelectors in as ordered arguments to mock\n   * the nested substores out.\n   * @param pathSelectors\n   */\n  static getSubStore<S>(\n    ...pathSelectors: PathSelector[]\n  ): MockObservableStore<S> {\n    return pathSelectors.length\n      ? MockNgRedux.getInstance().mockRootStore.getSubStore(...pathSelectors)\n      : MockNgRedux.getInstance().mockRootStore;\n  }\n\n  /**\n   * Reset all previously configured stubs.\n   */\n  static reset(): void {\n    MockNgRedux.getInstance().mockRootStore.reset();\n    NgRedux.instance = MockNgRedux.mockInstance as any;\n  }\n\n  /**\n   * Gets the singleton MockNgRedux instance. Useful for cases where your\n   * tests need to spy on store methods, for example.\n   */\n  static getInstance() {\n    MockNgRedux.mockInstance = MockNgRedux.mockInstance || new MockNgRedux();\n    return MockNgRedux.mockInstance;\n  }\n  //\n  private mockRootStore = new MockObservableStore<any>();\n\n  configureSubStore = this.mockRootStore.configureSubStore as any;\n  dispatch = this.mockRootStore.dispatch as Dispatch<any>;\n  getState = this.mockRootStore.getState as any;\n  subscribe = this.mockRootStore.subscribe;\n  replaceReducer = this.mockRootStore.replaceReducer;\n  select: <SelectedType>(\n    selector?: Selector<T, SelectedType>,\n    comparator?: Comparator,\n  ) => Observable<SelectedType> = this.mockRootStore.select;\n\n  /** @hidden */\n  constructor() {\n    super();\n    // This hooks the mock up to @select.\n    NgRedux.instance = this as any;\n  }\n\n  provideStore = (_: Store<any>): void => undefined;\n  configureStore = (\n    _: Reducer<any, AnyAction>,\n    __: any,\n    ___?: Middleware[],\n    ____?: StoreEnhancer<any>[],\n  ): void => undefined;\n}\n","// TODO: See if this linting rule can be enabled with new build process (ng-packagr)\n// tslint:disable:no-implicit-dependencies\nimport { DevToolsExtension, NgRedux } from '@angular-redux/store';\nimport { NgModule } from '@angular/core';\nimport { MockDevToolsExtension } from './dev-tools.mock';\nimport { MockNgRedux } from './ng-redux.mock';\n\n// Needs to be initialized early so @select's use the mocked version too.\nconst mockNgRedux = MockNgRedux.getInstance();\n\n/** @hidden */\nexport function _mockNgReduxFactory() {\n  return mockNgRedux;\n}\n\n@NgModule({\n  imports: [],\n  providers: [\n    { provide: NgRedux, useFactory: _mockNgReduxFactory },\n    { provide: DevToolsExtension, useClass: MockDevToolsExtension },\n  ],\n})\nexport class NgReduxTestingModule {}\n"]}